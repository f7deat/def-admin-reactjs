{"version":3,"sources":["serviceWorker.js","components/login.js","index.js"],"names":["Boolean","window","location","hostname","match","Login","className","icon","faUser","type","placeholder","required","faLock","id","htmlFor","href","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8DCbeC,E,uKAEb,OACI,yBAAKC,UAAU,mBACX,0BAAMA,UAAU,IACZ,wBAAIA,UAAU,8BAAd,kBACA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBAAmB,kBAAC,IAAD,CAAiBC,KAAMC,QAE7D,2BAAOC,KAAK,OAAOH,UAAU,eAAeI,YAAY,WAAWC,UAAQ,KAE/E,yBAAKL,UAAU,oBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBAAmB,kBAAC,IAAD,CAAiBC,KAAMK,QAE7D,2BAAOH,KAAK,WAAWH,UAAU,eAAeI,YAAY,WAAWC,UAAQ,KAEnF,yBAAKL,UAAU,qCACX,2BAAOG,KAAK,WAAWH,UAAU,uBAAuBO,GAAG,kBAC3D,2BAAOP,UAAU,uBAAuBQ,QAAQ,iBAAhD,gBAEJ,4BAAQR,UAAU,4BAA4BG,KAAK,UAAnD,YAEJ,uBAAGH,UAAU,6BAAb,aAAgD,uBAAGS,KAAK,4BAA4BT,UAAU,cAA9C,gB,GAxB7BU,IAAMC,WCCzCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0f5a601.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport '../css/login.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser, faLock } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class Login extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"form-signin p-4\">\r\n                <form className=\"\">\r\n                    <h1 className=\"h3 mb-4 font-weight-normal\">Please sign in</h1>\r\n                    <div className=\"input-group mb-2\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text\"><FontAwesomeIcon icon={faUser} /></div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Username\" required />\r\n                    </div>\r\n                    <div className=\"input-group mb-2\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text\"><FontAwesomeIcon icon={faLock} /></div>\r\n                        </div>\r\n                        <input type=\"password\" className=\"form-control\" placeholder=\"Password\" required />\r\n                    </div>\r\n                    <div className=\"custom-control custom-switch mb-4\">\r\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch1\" />\r\n                        <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Remember me</label>\r\n                    </div>\r\n                    <button className=\"btn btn-primary btn-block\" type=\"button\">Sign in</button>\r\n                </form>\r\n                <p className=\"pr-2 copyright text-muted\">Â© 2020 <a href=\"https://github.com/f7deat\" className=\"text-white\">F7Deat</a></p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from './components/login';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Login />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}